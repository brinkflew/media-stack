# ==============================================================================
# Automated Media Stack - Docker Compose Environment Variables
#
#   Author:   brinkflew <antoine.van.serveyt@gmail.com>
#   Created:  March 07, 2023
#   Revision: 1.0.0
# ------------------------------------------------------------------------------
# Update the following variables according to your needs.
#
# Linux users:
#   It is recommended to create a new user "media" to run
#   the containers with, so the applications can access the local filesystem
#   with this user's privileges.
#
#   Use PUID / PGID to map this user's access privileges between the containers
#   and the filesystem.
# ==============================================================================

# ------------------------------------------------------------------------------
# Docker Compose
# ------------------------------------------------------------------------------
# Variables used for the docker-compose architecture.
# It is reasonnable to keep it as-is.
# ------------------------------------------------------------------------------

# Name of the project stack in Docker.
DOCKER_COMPOSE_NAME=media-stack

# Version to use in docker-compose files. Do not change unless you know what
# you are doing.
# See: https://docs.docker.com/compose/compose-file/compose-versioning/#compatibility-matrix
DOCKER_COMPOSE_VERSION="3.7"

# ------------------------------------------------------------------------------
# Access Rights
# ------------------------------------------------------------------------------
# Define access privileges to the host's filesystem.
# Run the following command in a terminal to find the PUID / PGID of the user
# that should be used to run the containers and update accordingly:
#   sudo id <user>
# ------------------------------------------------------------------------------

# ID of the user running the containers.
PUID=1000

# ID of the group of the user running the containers.
PGID=1000

# Default permissions for created files.
UMASK=0002

# ------------------------------------------------------------------------------
# Timezone
# ------------------------------------------------------------------------------
# Synchronize date and time in containers.
# ------------------------------------------------------------------------------

TIMEZONE=Europe/Brussels

# ------------------------------------------------------------------------------
# Volumes
# ------------------------------------------------------------------------------
# The directory must exists and the user defined in PUID / PGID must have read
# and write access to it.
# ------------------------------------------------------------------------------

# Directory where applciations configs will be stored. 
DOCKER_VOLUME_CONFIG=/var/media-stack/config

# Root directory for media storage.
DOCKER_VOLUME_MEDIA=/mnt/media

# ------------------------------------------------------------------------------
# Networking
# ------------------------------------------------------------------------------
# Definition of the docker network to allow interaction between containers
# and the host.
# ------------------------------------------------------------------------------

# Name of the docker network.
NET_DOCKER_NAME=media-network

# Used inside the docker network "media-network", change if conflicting.
# with existing networks.
NET_DOCKER_SUBNET=172.21.10.0/24

# Main gateway for the docker network, change accordingly to NET_DOCKER_SUBNET.
NET_DOCKER_GATEWAY=172.21.10.1

# Your home local network is needed so that the VPN container can serve
# as a bridge to your local computer (for other containers).
# NOTE: run the following command in a terminal to find out the current subnet:
#   ip -o -f inet addr show | awk '/scope global/ {print $4}'
NET_LOCAL_SUBNET=192.168.0.0/24

# The IP address used by the VPN container on the local network.
# Make sure it is included in the above LOCAL_SUBNET and that it does not
# conflict with another address in the same network.
NET_LOCAL_DOCKER_ADDR=192.168.0.10

# ------------------------------------------------------------------------------
# Theming
# ------------------------------------------------------------------------------
# Applications from the *ARR suite are configured to benefit from a global
# style.
# ------------------------------------------------------------------------------

# Name of a theme for Theme Park.
# See: https://docs.theme-park.dev/theme-options
TP_THEME=nord

# Set to "true" if using a community theme in TP_THEME.
# See: https://docs.theme-park.dev/community-themes/
TP_COMMUNITY_THEME=false

# ------------------------------------------------------------------------------
# Virtual Private Network
# ------------------------------------------------------------------------------
# VPN configuration for enabling security and encryption of network traffic
# through the Gluetun container.
# ------------------------------------------------------------------------------

# VPN type, one of:
#   - openvpn
#   - wireguard
VPN_TYPE=openvpn

# VPN provider to use in the Gluetun container.
# Some providers require a valid (paid) subscription.
# Some providers have a quota on how many devices can use the subscription,
# this will count as one.
VPN_PROVIDER=nordvpn

# Credentials to login to the provider above
VPN_USERNAME=
VPN_PASSWORD=

# Localization options for the VPN provider.
# Choose a region close to your place for better performance.
# Regions: 
VPN_SERVER_REGION=Netherlands
VPN_SERVER_CITIES=Amsterdam
VPN_SERVER_HOSTS=

# Path to the custom config for OpenVPN. Edit only if using a custom
# configuration to connect to OpenVPN.
# The path should lead to an existing file in the Gluetun configuration
# directory, i.e. $DOCKER_VOLUME_CONFIG/gluetun/custom-openvpn.conf.
VPN_OPENVPN_CONFIG=

# Wireguard-specif options, fill only of VPN_TYPE is wireguard.
VPN_WG_ENDPOINT_ADDR=
VPN_WG_ENDPOINT_PORT=
VPN_WG_PUBLIC_KEY=
VPN_WG_PRIVATE_KEY=
VPN_WG_PRESHARED_KEY=
VPN_WG_ADDRESSES=

# ------------------------------------------------------------------------------
# Dynamic DNS
# ------------------------------------------------------------------------------
# DuckDNS is used to synchronize your local IP to a chosen domain name.
# See: https://www.duckdns.org/
# ------------------------------------------------------------------------------

# Subdomains to update with DuckDNS
DDNS_SUBDOMAINS=

# DuckDNS Token
DDNS_TOKEN=

# ------------------------------------------------------------------------------
# Reverse Proxy
# ------------------------------------------------------------------------------
# SWAG is configured as a reverse proxy with automatic TLS certificate renewal.
# ------------------------------------------------------------------------------

# Redirect incoming traffic on your Internet Gateway to the host IP address
# using the following ports and they will be translated back by SWAG.
#
# You can use NAT on your home router to redirect traffic:
#
#   Address From | Port From | Address To    | Port To
#   --------------------------------------------------
#   0.0.0.0      |        80 | 192.168.0.100 |      80
#   0.0.0.0      |       443 | 192.168.0.100 |     443
PORT_SWAG_HTTP=80
PORT_SWAG_HTTPS=443

# ------------------------------------------------------------------------------
# TLS Certificates
# ------------------------------------------------------------------------------
# Certificates are generated and renewed automatically for your domain.
# ------------------------------------------------------------------------------

# Domain to certify.
CERT_DOMAIN=

# Comma-separated list of subdomains to certify, or wildcard.
# These are prepended to the CERT_DOMAIN during validation.
CERT_SUBDOMAINS=flood,home,fakerr,prowlarr,radarr,request,sonarr,swag,tdarr,torrent,watch,docker

# Only generate a certificate for the subdomains and not for the bare domain.
# Set to `false` to enable certification of the bare domain.
CERT_SUBDOMAINS_ONLY=true

# Extra domain names to generate certificates for.
CERT_EXTRA_DOMAINS=

# Set to false during testing to avoind being banned by certification providers
# when issuing many requets.
CERT_STAGING=false

# Provider for the issued certificates.
# One of:
#   - lestencrypt
#   - zerossl
# See: https://docs.linuxserver.io/general/swag#cert-provider-lets-encrypt-vs-zerossl
CERT_PROVIDER=letsencrypt

# Specify the challenge used to validate the domain ownership.
# One of:
#   - http
#   - dns
#   - duckdns
# See: https://docs.linuxserver.io/general/swag#authorization-method
CERT_CHALLENGE=dns

# Only used if using `dns` in CERT_CHALLENGE.
CERT_DNS_PLUGIN=gandi
CERT_PROPAGATION=15

# Fill in with your DuckDNS token if using `duckdns` in CERT_CHALLENGE.
CERT_DUCKDNS_TOKEN=

# Fill in with your email if using `zerossl` as CERT_PROVIDER.
CERT_EMAIL=

# ------------------------------------------------------------------------------
# Applications Ports
# ------------------------------------------------------------------------------
# Network ports used by the different applications running inside
# the containers. Most of the are used to access the user interface from your
# browser.
# ------------------------------------------------------------------------------

# SWAG Dashboard
PORT_SWAG_DASHBOARD=81

# Portainer
PORT_PORTAINER_WEB=9000

# Flaresolverr
PORT_FLARESOLVERR=8191

# Prowlarr
PORT_PROWLARR_WEB=9696

# Radarr
PORT_RADARR_WEB=7878

# Sonarr
PORT_SONARR_WEB=8989

# QBittorrent
PORT_QBITTORRENT_TCP=6881
PORT_QBITTORRENT_UDP=6881
PORT_QBITTORRENT_WEB=8200

# JOAL
PORT_JOAL_WEB=8221

# Jellyfin
PORT_JELLYFIN_WEB=8096

# Jellyseerr
PORT_JELLYSEERR_WEB=5055

# Tdarr
PORT_TDARR_SERVER=8266
PORT_TDARR_WEB=8265

# Flood UI
PORT_FLOOD_WEB=3000

# ------------------------------------------------------------------------------
# Applications Config
# ------------------------------------------------------------------------------
# Some applications (like Unpackerr) require information from other applications
# to work seemlessly. These can be provided in a config file or throught
# the following environment variables when applicable and if you already know
# their value when running `docker-compose`.
# ------------------------------------------------------------------------------

# Radarr API Key (for Unpackerr)
RADARR_API_KEY=

# Sonarr API Key (for Unpackerr)
SONARR_API_KEY=

# JOAL Obfuscation Path
JOAL_OBFUSCATION_PATH=

# JOAL Secret
JOAL_SECRET_TOKEN=
